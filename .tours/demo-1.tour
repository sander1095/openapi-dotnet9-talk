{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Demo 1",
  "steps": [
    {
      "file": "demo1-using-openapi/OpenApiInDotnet8/OpenApiInDotnet8.csproj",
      "description": "In .NET 8, the default OpenAPI library was `Swashbuckle.AspNetCore`",
      "line": 12
    },
    {
      "file": "demo1-using-openapi/OpenApiInDotnet8/Program.cs",
      "selection": {
        "start": {
          "line": 8,
          "character": 1
        },
        "end": {
          "line": 24,
          "character": 2
        }
      },
      "description": "Adding OpenAPI support to ASP.NET Core is quite simple!\r\n\r\nWe need to add some services to the DI container and then map OpenAPI and SwaggerUI endpoints."
    },
    {
      "file": "demo1-using-openapi/ApiModels/TalkModel.cs",
      "selection": {
        "start": {
          "line": 6,
          "character": 1
        },
        "end": {
          "line": 19,
          "character": 2
        }
      },
      "description": "Before we look into endpoints and OpenAPI configuration, I want to show off some shared models between these demo projects.\r\n\r\nMost demo's will feature a fake, small conference talk API. This is the `TalkModel` that gets returned by the API, which is an `id`, `title`, `length in minutes` and `room name`.\r\n\r\nAs you can see, there are several attributes. These are used for validation and to enrich the OpenAPI document."
    },
    {
      "file": "demo1-using-openapi/ApiModels/CreateTalkModel.cs",
      "selection": {
        "start": {
          "line": 5,
          "character": 1
        },
        "end": {
          "line": 15,
          "character": 2
        }
      },
      "description": "To create a talk, we need to submit a title, length in minutes and a room name. These also have attributes to validate and enrich the OpenAPI spec."
    },
    {
      "file": "demo1-using-openapi/OpenApiInDotnet8/Controllers/TalksController.cs",
      "selection": {
        "start": {
          "line": 11,
          "character": 1
        },
        "end": {
          "line": 17,
          "character": 6
        }
      },
      "description": "Some demo's use Minimal API's. Some use controllers.\r\n\r\nThis one (which is still .NET 8) features controllers.\r\n\r\nThere are 3 endpoints. One to retrieve a list of sample talks, one for retrieving a talk by ID and another to create a new talk.\r\n\r\nThis endpoint returns a list of talk. you can see `ProducesResponseType`, which enriches the OpenAPI document by telling it this endpoint will return a collection of `TalkModel` with status code `200 OK`.\r\n\r\nIt is also set up with `ProducesDefaultResponseType`. This is quite a cool attribute. It tells the OpenAPI spec that if there would be any undocumented status codes returned from this document, the response body should be `Problem Details`, the standard for API error reporting. It's `Problem Details` because this is the default in ASP.NET Core."
    },
    {
      "file": "demo1-using-openapi/OpenApiInDotnet8/Controllers/TalksController.cs",
      "selection": {
        "start": {
          "line": 19,
          "character": 1
        },
        "end": {
          "line": 34,
          "character": 6
        }
      },
      "description": "**DO: Comment the ProducesResponseType for 404**\r\n\r\nNext, the endpoint to retrieve a single talk.\r\n\r\nThis can return a 200 OK with a single `TalkModel`, but it can also return a `404 not found`!\r\n\r\nHowever, now that we comment out the `ProducesResponseType` for `404`, a warning appears about us not having documented that return code. Very useful, and we'll talk more about this later."
    },
    {
      "file": "demo1-using-openapi/OpenApiInDotnet8/Controllers/TalksController.cs",
      "description": "Finally, the endpoint which creates a talk. You can see XML comments, which helps decorate the summary, parameter and description for OpenAPI. This is not supported in .NET 9, but will be in .NET 10.\r\n\r\nThis endpoint is a POST, and it can do multiple things.\r\n\r\nIt can return 200 OK with the created talk. \r\nIt can return 400 Bad Request when validation fails. \r\nIt can also return 409 Conflict if the talk title already exists.\r\n\r\nFinally, we're indicating that any unknown status codes should be treated as Problem Details again.",
      "selection": {
        "start": {
          "line": 36,
          "character": 5
        },
        "end": {
          "line": 65,
          "character": 5
        }
      }
    },
    {
      "file": "demo1-using-openapi/OpenApiInDotnet8/openapi.json",
      "selection": {
        "start": {
          "line": 8,
          "character": 5
        },
        "end": {
          "line": 25,
          "character": 17
        }
      },
      "description": "This will be the OpenAPI spec that's generated for the list of talks. A GET endpoint for api/talks that returns a 200 OK. There's multiple content types by default, but you can see it will return a list of the TalkModel schema."
    },
    {
      "file": "demo1-using-openapi/OpenApiInDotnet8/openapi.json",
      "selection": {
        "start": {
          "line": 44,
          "character": 11
        },
        "end": {
          "line": 51,
          "character": 17
        }
      },
      "description": "This is the \"default\" case I've talked about. Any status codes that are returned will have the mentioned response body, which is Problem Details."
    },
    {
      "file": "demo1-using-openapi/OpenApiInDotnet8/openapi.json",
      "selection": {
        "start": {
          "line": 66,
          "character": 7
        },
        "end": {
          "line": 71,
          "character": 57
        }
      },
      "description": "Here we see the Summary and description from the XML comments"
    },
    {
      "file": "demo1-using-openapi/OpenApiInDotnet8/openapi.json",
      "selection": {
        "start": {
          "line": 269,
          "character": 1
        },
        "end": {
          "line": 295,
          "character": 35
        }
      },
      "description": "This is Problem Details in the OpenAPI spec. I don't have time to go into each property, so I'll leave that up to you.\r\n\r\nMost important is title (of the error), detail (description) and status (http status code). "
    },
    {
      "file": "demo1-using-openapi/OpenApiInDotnet8/openapi.json",
      "selection": {
        "start": {
          "line": 296,
          "character": 7
        },
        "end": {
          "line": 328,
          "character": 8
        }
      },
      "description": "And this is the talk model, which looks very similar to the CreateTalkModel, so no need to cover this right now.\r\n\r\nYiu can see the required properties, and then each property being defined with a type, description and nullability.\r\n\r\nFun fact: You can see Swashbuckle making a small \"mistake\". It sets `Title` up as nullable, even though we used C#'s `required` keyword AND marked it as `string`, which is non-nullable. I believe NSwag does do this correctly ðŸ˜‰."
    },
    {
      "file": "demo1-using-openapi/ControllersDotnet9/ControllersDotnet9.csproj",
      "selection": {
        "start": {
          "line": 10,
          "character": 1
        },
        "end": {
          "line": 13,
          "character": 15
        }
      },
      "description": "Now that we understand how this worked in .NET 9, let's take a look at .NET 9!\r\n\r\nThis uses `Microsoft.AspNetCore.OpenApi` for creating the OpenAPI spec, and `Scalar` for rendering an UI based on the document. You can also still use Swashbuckle with SwaggerUI, but Scalar is newer and has cool features!"
    },
    {
      "file": "demo1-using-openapi/ControllersDotnet9/Program.cs",
      "selection": {
        "start": {
          "line": 7,
          "character": 1
        },
        "end": {
          "line": 18,
          "character": 2
        }
      },
      "description": "Adding OpenAPI in .NET 9 is still very easy!"
    },
    {
      "file": "demo1-using-openapi/ControllersDotnet9/Controllers/TalksController.cs",
      "selection": {
        "start": {
          "line": 39,
          "character": 1
        },
        "end": {
          "line": 45,
          "character": 121
        }
      },
      "description": "The TalksController is _almost_ the same as the .NET 8 variant.\r\n\r\nBEcause .NET 9 does not support XML Comments, we will need to use `EndpointSummary` and `Description` on the parameter to set up the relevant info for OpenAPI."
    },
    {
      "file": "demo1-using-openapi/ControllersDotnet9/openapi.json",
      "selection": {
        "start": {
          "line": 7,
          "character": 1
        },
        "end": {
          "line": 11,
          "character": 7
        }
      },
      "description": "This is the OpenAPI file generated in .NET 9. It's very similar, so let's not nitpick the very small changes. Instead, let's look atsome relevant ones!\r\n\r\nHere you see that .NET 9 adds a property, which is `servers`. This is a list of servers this API runs on. For example, local, test and prod. In this case, it adds my localhost."
    },
    {
      "file": "demo1-using-openapi/ControllersDotnet9/openapi.json",
      "selection": {
        "start": {
          "line": 298,
          "character": 1
        },
        "end": {
          "line": 327,
          "character": 10
        }
      },
      "description": "And this is the `TalkModel`. You can see that this does not make any mistakes with nullability."
    },
    {
      "file": "demo1-using-openapi/ControllersDotnet9/Program.cs",
      "description": "Let's go and run this demo and take a quick look at Scalar!\r\n\r\n**DO**\r\n\r\n- Visit `openapi/v1.json` for the OpenAPI endpoint.\r\n  - This is different compared to SwaggerUI, which was `swagger/v1/swagger.json`\r\n- Visit `/scalar` and show off the UI, API client code and test a request.",
      "line": 24,
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 7,
          "character": 75
        }
      }
    },
    {
      "file": "demo1-using-openapi/MinimalApiDotnet9/Program.cs",
      "selection": {
        "start": {
          "line": 9,
          "character": 1
        },
        "end": {
          "line": 19,
          "character": 24
        }
      },
      "description": "Now let's look at Minimal API endpoints with OpenAPI support!\r\n\r\nThis is the Program.cs file. I have built endpoints that are very similar to the controllers I showed before. In this case, we're calling `MapTalkEndpoints`."
    },
    {
      "file": "demo1-using-openapi/MinimalApiDotnet9/TalkEndpoints.cs",
      "selection": {
        "start": {
          "line": 17,
          "character": 1
        },
        "end": {
          "line": 26,
          "character": 6
        }
      },
      "description": "We're setting up our endpoints and methods that will execute the request here.\r\n\r\n- `WithName` sets the operationId.\r\n- `WithSummary` sets the summary."
    },
    {
      "file": "demo1-using-openapi/MinimalApiDotnet9/TalkEndpoints.cs",
      "selection": {
        "start": {
          "line": 28,
          "character": 1
        },
        "end": {
          "line": 31,
          "character": 6
        }
      },
      "description": "This method uses `TypedResults` combined with the `Ok<List<TalkModel>>` to provide method metadata for OpenAPI so it understands what is being returned.\r\n\r\nYou CAN also use other approaches like `ProducesResponseType` and extension methods. We'll talk more about this at the end of the talk. This is all about preference, and for this demo, this requires the least code and works well enough!"
    },
    {
      "file": "demo1-using-openapi/MinimalApiDotnet9/TalkEndpoints.cs",
      "selection": {
        "start": {
          "line": 33,
          "character": 1
        },
        "end": {
          "line": 40,
          "character": 6
        }
      },
      "description": "This endpoint returns multiple statuses. To deal with this, we use `Results`, which is kind of a union type, to indicate that this either returns an `OK` with a `TalkModel` or a `NotFound`.\r\n\r\nThe create talk endpoint is very similar, so I'll skip that one for now to save time."
    },
    {
      "file": "demo1-using-openapi/AheadOfTime/AheadOfTime.csproj",
      "description": "This is roughly the same Minimal API project, but now in AOT mode!\r\n\r\nThis is generated with `dotnet new webapiaot`. By setting PublishAOT to true, it will build the app for AOT during publish, and enable dynamic code analysis.",
      "line": 8
    },
    {
      "file": "demo1-using-openapi/AheadOfTime/Program.cs",
      "selection": {
        "start": {
          "line": 11,
          "character": 1
        },
        "end": {
          "line": 14,
          "character": 46
        }
      },
      "description": "Now we're in the `Program.cs` of the Minimal API AOT project.\r\n\r\nFirst, you'll see we're using `CreateSlimBuilder`. This adds a limited amount of services to the web application, and strips things that aren't supported for AOT. This also creates a smaller binary!\r\n\r\nBelow, you'll see a warning! I'm trying to get a list of all types in the app, but this MIGHT cause issues in AOT mode because some types might be stripped. This is just an example to show off the scanning.\r\n\r\nYou can find more info about AOT in the docs."
    },
    {
      "file": "demo1-using-openapi/AheadOfTime/Program.cs",
      "selection": {
        "start": {
          "line": 16,
          "character": 1
        },
        "end": {
          "line": 22,
          "character": 118
        }
      },
      "description": "Next, we need to set up JSON serialization to use source generators instead of reflection. More on this later.\r\n\r\nBelow that, we'll see some configuration for Scalar in AOT mode. This issue has been fixed already, and I'm waiting for a package upgrade to get this code removed."
    },
    {
      "file": "demo1-using-openapi/AheadOfTime/Program.cs",
      "selection": {
        "start": {
          "line": 24,
          "character": 1
        },
        "end": {
          "line": 30,
          "character": 24
        }
      },
      "description": "There's not a lot to show off regarding  OpenAPI and Scalar. It just works. We're creating the same routes as in the last project."
    },
    {
      "file": "demo1-using-openapi/AheadOfTime/Program.cs",
      "selection": {
        "start": {
          "line": 33,
          "character": 1
        },
        "end": {
          "line": 42,
          "character": 1
        }
      },
      "description": "Finally, we need to provide a list of types that the project needs to source generate JSON serializer/deserializers for."
    }
  ]
}